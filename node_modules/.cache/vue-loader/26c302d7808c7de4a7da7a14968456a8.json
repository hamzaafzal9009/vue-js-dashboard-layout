{"remainingRequest":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/src/components/Vehicles.vue?vue&type=style&index=0&id=a0408912&scoped=true&lang=css&","dependencies":[{"path":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/src/components/Vehicles.vue","mtime":1615324991632},{"path":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Library/WebServer/Documents/Projects/vue/m-driver-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmdyZXktdGV4dCB7CiAgY29sb3I6ICNjZWNlY2U7Cn0KLmdyZWVuLXRleHQgewogIGNvbG9yOiBkYXJrZ3JlZW47Cn0KCi5pbWctdXNlciB7CiAgd2lkdGg6IDUwcHg7CiAgaGVpZ2h0OiA1MHB4OwogIGJvcmRlci1yYWRpdXM6IDUwJTsKfQoKLmRyaXZlci1uYW1lIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAyNnB4OwogIGxlZnQ6IDgwcHg7Cn0KLnRleHQtY2VudGVyIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0K"},{"version":3,"sources":["Vehicles.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuXA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Vehicles.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"dashboard-container\">\n    <el-card class=\"card-min-height\">\n      <div class=\"card-header\">\n        <div class=\"card-title\">\n          <h3>Vehicles</h3>\n        </div>\n        <div class=\"card-actions\">\n          <div class=\"input-group\">\n            <el-input\n              v-model=\"filters.phone_number\"\n              placeholder=\"Search By Phone Number\"\n              ><i slot=\"suffix\" class=\"far fa-search\"></i\n            ></el-input>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card-body\">\n        <el-table\n          :data=\"tripFilterData\"\n          style=\"width: 100%\"\n          size=\"small\"\n          empty-text=\"No results found.\"\n        >\n          <el-table-column prop=\"driverFirstName\" label=\"Driver\" width=\"300\">\n            <template slot-scope=\"props\">\n              <span v-if=\"isDriverPresent(props.row.id)\">\n                <span>\n                  <img\n                    :src=\"getDriverAvatarUrl(props.row.id)\"\n                    class=\"img-user\"\n                    alt=\"...\"\n                  />\n                </span>\n                <span v-if=\"typeof props === 'object'\" class=\"driver-name\">\n                  {{ getDriverName(props.row.id) }}\n                </span>\n              </span>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"driverEmail\" label=\"Email\" width=\"250\">\n            <template slot-scope=\"props\">\n              <span v-if=\"isDriverPresent(props.row.id)\">\n                <span v-if=\"typeof props === 'object'\">\n                  {{ getDriverEmail(props.row.id) }}\n                </span>\n              </span>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"fleetId\" label=\"Fleet\" width=\"80\">\n          </el-table-column>\n          <el-table-column prop=\"id\" label=\"Number\" width=\"130\">\n          </el-table-column>\n\n          <el-table-column\n            prop=\"definition\"\n            label=\"Vehicle Capacity\"\n            width=\"150\"\n          >\n            <template slot-scope=\"props\">\n              <div>\n                {{ props.row.definition.riderCapacity || \"-\" }}\n              </div>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"state\" label=\"Availability\" width=\"120\">\n            <template slot-scope=\"props\">\n              <div>\n                <el-tooltip\n                  class=\"item\"\n                  effect=\"dark\"\n                  placement=\"right\"\n                  :content=\"props.row.state.readiness ? ' Online' : ' Offline'\"\n                >\n                  <div class=\"text-center\">\n                    <i\n                      class=\"fa fa-circle\"\n                      :class=\"\n                        props.row.state.readiness ? 'green-text' : 'grey-text'\n                      \"\n                    ></i>\n                  </div>\n                </el-tooltip>\n              </div>\n            </template>\n          </el-table-column>\n          <el-table-column\n            prop=\"lastActiveTime\"\n            label=\"Last Active\"\n            width=\"150\"\n          >\n            <template slot-scope=\"props\">\n              <div v-if=\"props.row.state.lastActiveTime\">\n                {{ props.row.state.lastActiveTime.substring(0, 10) }}\n              </div>\n              <div v-if=\"props.row.state.lastActiveTime\">\n                {{ props.row.state.lastActiveTime.substring(11, 19) }}\n              </div>\n              <div v-else>\n                No Record Found\n              </div>\n            </template>\n          </el-table-column>\n          <el-table-column fixed=\"right\" label=\"Actions\" width=\"90\">\n            <template slot-scope=\"props\">\n              <el-tooltip\n                class=\"item\"\n                effect=\"dark\"\n                content=\"Delete Driver\"\n                placement=\"top\"\n              >\n                <el-button\n                  type=\"danger\"\n                  icon=\"el-icon-delete\"\n                  circle\n                  plain\n                  size=\"mini\"\n                  @click=\"openConfirmDialog(props.row)\"\n                ></el-button>\n              </el-tooltip>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n\n      <div class=\"pagination block\">\n        <span\n          >Showing {{ paginationData.perPage }} of\n          {{ paginationData.total }} Total Results</span\n        >\n        <el-pagination\n          background\n          layout=\"prev, pager, next\"\n          :current-page=\"paginationPage\"\n          :page-size=\"paginationData.perPage\"\n          :total=\"paginationData.total\"\n          small\n          @current-change=\"addPageNum\"\n        ></el-pagination>\n        <el-select\n          class=\"per-page-select\"\n          size=\"mini\"\n          v-model=\"paginationData.perPage\"\n        >\n          <el-option\n            v-for=\"option in paginationData.perPageOptions\"\n            :value=\"option\"\n            :key=\"option\"\n            >{{ option }}\n          </el-option>\n        </el-select>\n      </div></el-card\n    >\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nconst db = firebase.firestore();\nconst driverRef = db.collection(\"drivers\");\nimport { EventService } from \"../main\";\n\nexport default {\n  data() {\n    return {\n      items: [\n        {\n          text: \"Dashboard\",\n          disabled: false,\n          href: \"/dashboards\",\n        },\n        {\n          text: \"Vehicles\",\n          disabled: true,\n          href: \"\",\n        },\n      ],\n      comfirmationBox: false,\n      message: \"\",\n      currentAction: \"\",\n      loading: false,\n      headers: [\n        { text: \"Driver\", sortable: false },\n        { text: \"Vehicle\", sortable: false },\n        { text: \"Fleet\", sortable: false },\n        { text: \"Vehicle Capacity\", sortable: false },\n        { text: \"Is Available\", sortable: false },\n        { text: \"Last Active Time\", sortable: false },\n        { text: \"Action\", sortable: false },\n      ],\n      filters: {\n        full_name: \"\",\n        phone_number: \"\",\n        email: \"\",\n      },\n      tripsDetail: {},\n      status: \"All\",\n      tripsInfo: [],\n      currentId: \"\",\n      dailyEarningDetail: {},\n      authUser: {},\n      driverData: [],\n      currentStatus: \"\",\n      vehicleList: [],\n      paginationData: {\n        perPage: 10,\n        currentPage: 0,\n        perPageOptions: [10, 20, 50],\n        total: 0,\n      },\n    };\n  },\n  computed: {\n    driverDetail() {\n      return this.vehicleList.filter((el) => el.id);\n    },\n    paginationPage() {\n      return this.paginationData.currentPage + 1;\n    },\n    tripFilterData() {\n      const start =\n          this.paginationData.currentPage * this.paginationData.perPage,\n        end = start + this.paginationData.perPage;\n      return this.driverDetail\n        .filter((ele) => {\n          return ele.id\n            .toLowerCase()\n            .includes(this.filters.phone_number.toLowerCase() || \"\");\n        })\n        .slice(start, end);\n    },\n  },\n  head() {\n    return {\n      title: \"Vehicle | List | Admin\",\n    };\n  },\n  created() {\n    EventService.$emit(\"loading\", \"show\");\n    this.getDrivers();\n    this.getVehicle();\n  },\n  methods: {\n    getDrivers() {\n      driverRef.get().then((data) => {\n        const response = { ...data.docs.map((value) => value.data()) };\n        // console.log(\"Driver\", JSON.stringify(response));\n        this.driverData = response;\n        EventService.$emit(\"loading\", \"hide\");\n      });\n    },\n    addPageNum(page) {\n      this.paginationData.currentPage = page - 1;\n    },\n    getVehicle() {\n      const api = this.axios.create({\n        headers: {\n          common: {\n            \"Content-Type\": \"application/json\",\n            \"X-API-Key\":\n              \"NJjy0LIuZVCPGWjyjfHsYdL9TAQiVZbP:FgXY7PrpLCpeboYy5y5BWQp-KBzaHQJ83p7parhnAGCu0W5XJIQYp7IkkltqHbk-\",\n            Accept: \"application/json\",\n          },\n        },\n      });\n\n      api\n        .post(\"https://api.rideos.ai/ride-hail-operations/v1/GetVehicles\", {\n          fleetId: \"default\",\n        })\n        .then(({ data }) => {\n          this.vehicleList = data[\"vehicle\"];\n          this.paginationData.total = data[\"vehicle\"].length;\n          //   console.log(\"Vehicle\", JSON.stringify(this.vehicleList));\n        })\n        .finally(() => {\n          EventService.$emit(\"loading\", \"hide\");\n        });\n    },\n    setStatusFilter(tab) {\n      this.status = tab;\n    },\n    openConfirmDialog(detail) {\n      this.currentId = detail.id;\n      this.currentStatus = detail.driverStatus;\n      this.deleteUser();\n    },\n    deleteUserOnly() {\n      EventService.$emit(\"loading\", \"show\");\n      driverRef\n        .doc(this.currentId)\n        .delete()\n        .then(() => {\n          EventService.$emit(\"successMessage\", \"Deleted Successful.\");\n          EventService.$emit(\"loading\", \"hide\");\n          this.getDrivers();\n        })\n        .catch(() => {\n          EventService.$emit(\"errorMessage\", \"Something Went Wrong!\");\n          EventService.$emit(\"loading\", \"hide\");\n        });\n    },\n\n    deleteUser() {\n      this.$confirm(\"Are you sure you want to Delete?\")\n        .then((_) => {\n          EventService.$emit(\"loading\", \"show\");\n          const dataToPost = {\n            id: this.currentId,\n          };\n          const url = \"https://api.rideos.ai/ride-hail-driver/v1/RemoveVehicle\";\n          const api = this.axios.create({\n            headers: {\n              common: {\n                \"Content-Type\": \"application/json\",\n                \"X-API-Key\":\n                  \"NJjy0LIuZVCPGWjyjfHsYdL9TAQiVZbP:FgXY7PrpLCpeboYy5y5BWQp-KBzaHQJ83p7parhnAGCu0W5XJIQYp7IkkltqHbk-\",\n                Accept: \"application/json\",\n              },\n            },\n          });\n          api.post(url, dataToPost).then(() => {\n            EventService.$emit(\"successMessage\", \"Deleted Successful.\");\n            EventService.$emit(\"loading\", \"hide\");\n            this.getVehicle();\n          });\n        })\n        .catch((_) => {});\n    },\n    getDriverAvatarUrl(vehicleId) {\n      const riderObj = Object.values(this.driverData).find(\n        (obj) => obj.driverId === vehicleId\n      );\n      if (riderObj && riderObj[\"userAvatarUrl\"] !== \"\") {\n        if (riderObj[\"driverAvatarUrl\"] !== \"\") {\n          return riderObj[\"driverAvatarUrl\"];\n        } else {\n          return require(`@/assets/img/default-user.jpg`);\n        }\n      }\n      return require(`@/assets/img/default-user.jpg`);\n    },\n    getDriverName(vehicleId) {\n      const riderObj = Object.values(this.driverData).find(\n        (obj) => obj.driverId === vehicleId\n      );\n      if (riderObj) {\n        return `${riderObj[\"driverFirstName\"]} ${riderObj[\"driverLastName\"]}`;\n      }\n      return \"No Name\";\n    },\n    getDriverEmail(vehicleId) {\n      const riderObj = Object.values(this.driverData).find(\n        (obj) => obj.driverId === vehicleId\n      );\n      if (riderObj) {\n        return riderObj[\"driverEmail\"];\n      }\n      return \"-\";\n    },\n    isDriverPresent(vehicleId) {\n      const riderObj = Object.values(this.driverData).find(\n        (obj) => obj.driverId === vehicleId\n      );\n      if (riderObj) {\n        return true;\n      }\n      return false;\n    },\n  },\n};\n</script>\n<style scoped>\n.grey-text {\n  color: #cecece;\n}\n.green-text {\n  color: darkgreen;\n}\n\n.img-user {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n}\n\n.driver-name {\n  position: absolute;\n  top: 26px;\n  left: 80px;\n}\n.text-center {\n  text-align: center;\n}\n</style>\n"]}]}